// WRITTEN IN INSTANCE MODE FOR MULTPLE CANVASES ON ONE PAGE

const graphGenerator = function(sketch) {
          let avgArray, avgArraySorted, avgRecent, avgAll;
          let yCenter, yLower, randomTest;
          const delta = 40; // used during test
          const deltas = [];


          // ******* Helper Functions ****************************************************

          function mapCenter( value ) {
            return sketch.map(  // ** p5 map - map to a new range
              value,
              0, avgArraySorted[ avgArraySorted.length - 1 ], // original range // TODO get rid of sorted and use max
              sketch.height, 20
            ); // mapped range, reversed for natural y axis w 0 at bottom, but not all the way to 0 to avoid graphic cut off
          }

          function mapGraph( value ) {
            return sketch.map(
              value,
              0, avgArraySorted[ avgArraySorted.length - 1 ], // original range // TODO
              0, sketch.height/2
            );
          }


          // *******           SETUP           *******************************************

          sketch.setup = function() {
            const graph = sketch.createCanvas(window.innerWidth, 240); // create canvas
            // graph.parent('graph');  // then allocate to parent div
            //
            //
            // **** init display settings ***********
            sketch.noFill();
            sketch.stroke(255, 120);
            sketch.strokeWeight(3);


            // ******* bring in keystroke data *************
            avgArray = <%= Keystroke.calc_avg_prev_array %>;
            avgArraySorted = avgArray.slice().sort((a, b) => a - b ); // sort numerically
            avgRecent = avgArray[ avgArray.length - 1 ];
            avgAll = <%= Keystroke.calc_avg_all %>;
            yCenter = mapCenter( avgAll );
            yLower = sketch.height - yCenter;

            // CONVERT DB VALUES INTO DELTAS
            avgArray.forEach((a) => {
              const v = mapGraph( a );
              deltas.push( v );
            });

            // randomTest
            randomTest = sketch.random( deltas[2] );
          }




          // *******            DRAW           *******************************************

          sketch.draw = function() {
            // sketch.background(255, 0, 0);
            sketch.clear();


            // GRAPHING


            sketch.line( 0, yCenter, sketch.width, yCenter );

            sketch.beginShape();
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(sketch.width*1/4,  yCenter + deltas[0]);
            sketch.curveVertex(sketch.width*2/4,  yCenter - deltas[0]);
            sketch.curveVertex(sketch.width*3/4,  yCenter + deltas[0]);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.endShape();

            sketch.beginShape();
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(sketch.width*1/5,  yCenter + deltas[1]);
            sketch.curveVertex(sketch.width*2/5,  yCenter - deltas[1]);
            sketch.curveVertex(sketch.width*3/5,  yCenter + deltas[1]);
            sketch.curveVertex(sketch.width*4/5,  yCenter + deltas[1]);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.endShape();


            sketch.beginShape();
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(sketch.width*1/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width*2/6,  yCenter - randomTest);
            sketch.curveVertex(sketch.width*3/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width*4/6,  yCenter - deltas[2]);
            sketch.curveVertex(sketch.width*5/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width, yCenter);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.endShape();


            sketch.beginShape();
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(sketch.width*1/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width*2/6,  yCenter - randomTest);
            sketch.curveVertex(sketch.width*3/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width*4/6,  yCenter - deltas[3]);
            sketch.curveVertex(sketch.width*5/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width, yCenter);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.endShape();


          }
};

// const $graph = $("#graph")
const p5_graph = new p5(graphGenerator, "graph");  // args: function for sketch, id of div to attach to
