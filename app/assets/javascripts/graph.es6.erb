// WRITTEN IN INSTANCE MODE FOR MULTPLE CANVASES ON ONE PAGE

const graphGenerator = function(sketch) {
          let avgArray, avgArraySorted, avgRecent, avgAll;
          let yCenter, yLower, randomTest;
          const deltas = [];
          const breakPoint = 800;
          let count = 0;


          // ******* Helper Functions ****************************************************

          function mapCenter( value ) {
            return sketch.map(  // ** p5 map - map to a new range
              value,
              0, avgArraySorted[ avgArraySorted.length - 1 ], // original range // TODO get rid of sorted and use max
              sketch.height, 20
            ); // mapped range, reversed for natural y axis w 0 at bottom, but not all the way to 0 to avoid graphic cut off
          }

          function mapGraph( value ) {
            if (window.innerWidth >= breakPoint ) {
              return sketch.map(
                value,
                0, avgArraySorted[ avgArraySorted.length - 1 ], // original range // TODO
                0, sketch.height/2
              );
            } else {
              return sketch.map(
                value,
                0, avgArraySorted[ avgArraySorted.length - 1 ], // original range // TODO
                0, sketch.height/4
              );
            }


          }


          // *******           SETUP           *******************************************

          sketch.setup = function() {
            if (window.innerWidth >= breakPoint ) {
              const graph = sketch.createCanvas( $(window).width(), 240 ); // create canvas, more accurate w jQuery
            } else {
              const graph = sketch.createCanvas( $(window).width(), 140 );
            }

            // **** init display settings ***********
            sketch.noFill();
            if (window.innerWidth >= 450 ) { // picked 450 as a breakpoint
              sketch.stroke(255, 120);
            } else {
              sketch.stroke(255, 0); // cheating making graph disappear for smaller screens
            }
            sketch.strokeWeight(1);


            // ******* bring in keystroke data *************
            // avgArray = <%# Keystroke.calc_avg_prev_array %>;
            avgArray = [10962.222779385957, 3522.7183825435354, 2091.0318534474545, 18240.166695606877]; // CHANGED manually setting values before live keystroke data is implemented
            avgArraySorted = avgArray.slice().sort((a, b) => a - b ); // sort numerically
            avgRecent = avgArray[ avgArray.length - 1 ];
            // avgAll = <%# Keystroke.calc_avg_all %>;
            avgAll =  6077.478743727049; // CHANGED manually setting values before live keystroke data is implemented
            yCenter = mapCenter( avgAll );
            yLower = sketch.height - yCenter;

            // CONVERT DB VALUES INTO DELTAS
            avgArray.forEach((a) => {
              const v = mapGraph( a );
              deltas.push( v );
            });

            // randomTest = sketch.random( deltas[2] );
            randomTest = 10.5; // CHANGED - manually setting this value until more work can be done on interactive graph
          }




          // *******            DRAW           *******************************************

          sketch.draw = function() {
            sketch.clear();


            // GRAPHING

            sketch.line( 0, yCenter, sketch.width, yCenter );

            sketch.beginShape();
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(sketch.width*1/4,  yCenter + deltas[0]);
            sketch.curveVertex(sketch.width*2/4,  yCenter - deltas[0]);
            sketch.curveVertex(sketch.width*3/4,  yCenter + deltas[0]);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.endShape();

            sketch.beginShape();
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(sketch.width*1/5,  yCenter + deltas[1]);
            sketch.curveVertex(sketch.width*2/5,  yCenter - deltas[1]);
            sketch.curveVertex(sketch.width*3/5,  yCenter + deltas[1]);
            sketch.curveVertex(sketch.width*4/5,  yCenter + deltas[1]);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.endShape();


            sketch.beginShape();
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(sketch.width*1/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width*2/6,  yCenter - randomTest);
            sketch.curveVertex(sketch.width*3/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width*4/6,  yCenter - deltas[2]);
            sketch.curveVertex(sketch.width*5/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width, yCenter);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.endShape();


            sketch.beginShape();
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(0,  yCenter);
            sketch.curveVertex(sketch.width*1/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width*2/6,  yCenter - randomTest);
            sketch.curveVertex(sketch.width*3/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width*4/6,  yCenter - deltas[3]);
            sketch.curveVertex(sketch.width*5/6,  yCenter + (yLower-10));
            sketch.curveVertex(sketch.width, yCenter);
            sketch.curveVertex(sketch.width, yCenter);
            sketch.endShape();

            count++;
          }


          sketch.windowResized = function() {
            sketch.resizeCanvas( $(window).width(), 240 );
          }
};


const p5_graph = new p5(graphGenerator, "graph");  // args: function for sketch, id of div to attach to
